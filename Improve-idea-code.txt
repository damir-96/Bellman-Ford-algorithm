#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int INF = 1e9;

vector<int> bellman_ford(vector<vector<pair<int, int>>>& graph, int source) {
    // Initialize distance vector and predecessor vector
    int n = graph.size();
    vector<int> distance(n, INF);
    vector<int> predecessor(n, -1);
    distance[source] = 0;

    // Add source node to priority queue with priority equal to its distance from the source
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, source));

    // Process nodes in priority order
    while (!pq.empty()) {
        int current_distance = pq.top().first;
        int current_node = pq.top().second;
        pq.pop();

        // Skip nodes that have already been processed
        if (current_distance > distance[current_node]) {
            continue;
        }

        // Relax edges and update distance vector and priority queue
        for (auto& edge : graph[current_node]) {
            int neighbor = edge.first;
            int weight = edge.second;
            int new_distance = distance[current_node] + weight;
            if (new_distance < distance[neighbor]) {
                distance[neighbor] = new_distance;
                predecessor[neighbor] = current_node;
                pq.push(make_pair(new_distance, neighbor));
            }
        }
    }

    return distance;
}

int main() {
    int n = 5;
    vector<vector<pair<int, int>>> graph(n);

    graph[0].push_back(make_pair(1, 5));
    graph[0].push_back(make_pair(2, 3));
    graph[1].push_back(make_pair(3, 7));
    graph[1].push_back(make_pair(4, 2));
    graph[2].push_back(make_pair(1, 2));
    graph[2].push_back(make_pair(3, 1));
    graph[3].push_back(make_pair(4, 2));

    int source = 0;
    vector<int> distance = bellman_ford(graph, source);

    cout << "Shortest distances from node " << source << ":" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Node " << i << ": " << distance[i] << endl;
    }

    return 0;
}
